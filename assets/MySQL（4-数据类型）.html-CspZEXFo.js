import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as l,o as e}from"./app-arQAAk6n.js";const a={};function n(h,t){return e(),s("div",null,[...t[0]||(t[0]=[l(`<h2 id="整数型" tabindex="-1"><a class="header-anchor" href="#整数型"><span>整数型</span></a></h2><table><thead><tr><th style="text-align:left;">整数类型</th><th style="text-align:left;">字节数</th><th style="text-align:left;">无符号数的取值范围</th><th style="text-align:left;">有符号数的取值范围</th></tr></thead><tbody><tr><td style="text-align:left;">TINYINT</td><td style="text-align:left;">1</td><td style="text-align:left;">0 ~ 255</td><td style="text-align:left;">-128 ~ 127</td></tr><tr><td style="text-align:left;">SMALLINT</td><td style="text-align:left;">2</td><td style="text-align:left;">0 ~ 65535</td><td style="text-align:left;">-32768 ~ 32767</td></tr><tr><td style="text-align:left;">MEDIUMINT</td><td style="text-align:left;">3</td><td style="text-align:left;">0 ~ 16777215</td><td style="text-align:left;">-8388608 ~ 8388607</td></tr><tr><td style="text-align:left;">INT</td><td style="text-align:left;">4</td><td style="text-align:left;">0 ~ 4294967295</td><td style="text-align:left;">-2147483648 ~ 2147483647</td></tr><tr><td style="text-align:left;">INTEGER</td><td style="text-align:left;">4</td><td style="text-align:left;">0 ~ 4294967295</td><td style="text-align:left;">-2147483648 ~ 2147483647</td></tr><tr><td style="text-align:left;">BIGINT</td><td style="text-align:left;">8</td><td style="text-align:left;">0 ~ 18446744073709551615</td><td style="text-align:left;">-9223372036854775808 ~ 9223372036854775807</td></tr></tbody></table><ol><li>TINYINT ：一般用于枚举数据，比如系统设定取值范围很小且固定的场景。</li><li>SMALLINT ：可以用于较小范围的统计数据，比如统计工厂的固定资产库存数量等。</li><li>MEDIUMINT ：用于较大整数的计算，比如车站每日的客流量等。</li><li>INT、INTEGER ：取值范围足够大，一般情况下不用考虑超限问题，用得最多。比如商品编号。</li><li>BIGINT ：只有处理特别巨大的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证券公司衍生产品持仓等。</li></ol><h2 id="浮点类型和定点型" tabindex="-1"><a class="header-anchor" href="#浮点类型和定点型"><span>浮点类型和定点型</span></a></h2><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">字节数</th><th style="text-align:left;">负数的取值范围</th><th style="text-align:left;">非负数的取值范围</th></tr></thead><tbody><tr><td style="text-align:left;">FLOAT</td><td style="text-align:left;">4</td><td style="text-align:left;">-3.402823466E+38 ~ -1.175494351E-38</td><td style="text-align:left;">0 和 1.175494351E-38 ~ 3.402823466E+38</td></tr><tr><td style="text-align:left;">DOUBLE</td><td style="text-align:left;">8</td><td style="text-align:left;">-1.7976931348623157E+308 ~ -2.2250738585072014E-308</td><td style="text-align:left;">0 和 2.2250738585072014E-308 ~ 1.7976931348623157E+308</td></tr><tr><td style="text-align:left;">DECIMAL(M, D) 或 DEC(M, D)</td><td style="text-align:left;">M+2</td><td style="text-align:left;">同 DOUBLE 型</td><td style="text-align:left;">同 DOUBLE 型</td></tr></tbody></table><ol><li><p>float 数值类型用于表示单精度浮点数值，而 double 数值类型用于表示双精度浮点数值，decimal 是定点型；</p></li><li><p>浮点型和定点型可以用类型名称后加（M，D）来表示，M 表示该值的总共长度，D 表示小数点后面的长度，M 和 D 又称为精度和标度</p></li></ol><ul><li><p>FLOAT 与 DOUBLE：(M, D)中 M = 整数位+小数位，D = 小数位。 D &lt;= M &lt;= 255，0 &lt;= D &lt;= 30。在不指定(M, D)时，默认会按照实际的精度（由实际的硬件和操作系统决定）来显示。如 float(7,4)的可显示为-999.9999，MySQL 保存值时进行四舍五入，如果插入 999.00009，则结果为 999.0001。</p></li><li><p>DECIMAL：M 是最大位数（精度），范围是 1 到 65，可不指定，默认值是 10。D 是小数点右边的位数（小数位），范围是 0 到 30，并且不能大于 M，可不指定，默认值是 0。</p></li></ul><p>当设定的 float 或 double 的标度超过原来时，因为 float 或 double 本身所占用空间有限，所以超过本能存储位数时会以随机数字填充。</p><h2 id="日期和时间类型" tabindex="-1"><a class="header-anchor" href="#日期和时间类型"><span>日期和时间类型</span></a></h2><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">字节数</th><th style="text-align:left;">取值范围</th><th style="text-align:left;">零值</th></tr></thead><tbody><tr><td style="text-align:left;">YEAR</td><td style="text-align:left;">1</td><td style="text-align:left;">1901 ~ 2155</td><td style="text-align:left;">0000</td></tr><tr><td style="text-align:left;">DATE</td><td style="text-align:left;">4</td><td style="text-align:left;">1000-01-01 ~ 9999-12-31</td><td style="text-align:left;">0000-00-00</td></tr><tr><td style="text-align:left;">TIME</td><td style="text-align:left;">3</td><td style="text-align:left;">-838:59:59 ~ 838:59:59</td><td style="text-align:left;">00:00:00</td></tr><tr><td style="text-align:left;">DATETIME</td><td style="text-align:left;">8</td><td style="text-align:left;">1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td style="text-align:left;">0000-00-00 00:00:00</td></tr><tr><td style="text-align:left;">TIMESTAMP</td><td style="text-align:left;">4</td><td style="text-align:left;">1970-01-01 08:00:01 ~ 2038-01-19 11:14:07</td><td style="text-align:left;">00000000000000</td></tr></tbody></table><p>常用的时间函数：</p><ol><li>CURDATE() ：获得当前的 DATE, 可直接插入 DATE 类型中；</li><li>NOW() ：获得当前的 DATETIME, 可直接插入 DATETIME 和 TIMESTAMP 类型中；</li><li>TIME() ：获取参数给定时间串中的时分秒，可直接插入 TIME 类型中；</li><li>YEAR() ：获取参数给定时间串中的年份，可直接插入 YEAR 类型中；</li><li>MONTH() 、DAY()、HOUR()、MINUTE()、SECOND() 获取参数给定时间串中的月、日、时、分、秒值；</li></ol><p><strong>datetime 和 timestamp 的区别</strong></p><ol><li>timestamp 如果不给这个字段赋值或赋值为 null，则默认使用当前的系统时间来自动赋值（自动存储记录修改时间）</li><li>timestamp 存储的时间范围比 datetime 要小很多，只能存储“1970-01-01 00:00:01 UTC”到“2038-01-19 03:14:07 UTC”之间的时间</li></ol><h2 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型"><span>字符串类型</span></a></h2><p><strong>CHAR 与 VARCHAR</strong></p><table><thead><tr><th><strong>类型</strong></th><th>字节数</th><th>用途</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr></tbody></table><ol><li>如果 CHAR 数据的实际长度比 CHAR 类型声明的长度小，则会在右侧填充空格以达到指定的长度。定义 CHAR 类型字段时，声明的字段长度即为 CHAR 类型字段所占的存储空间的字节数。当 MySQL 检索 CHAR 类型的数据时，CHAR 类型的字段会去除尾部的空格</li><li>VARCHAR 类型的字段所占用的存储空间为字符串实际长度加 1 个字节。检索 VARCHAR 类型的字段数据时，会保留数据尾部的空格</li></ol><p><strong>TEXT</strong></p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">允许的长度</th></tr></thead><tbody><tr><td style="text-align:left;">TINYTEXT</td><td style="text-align:left;">0 ~ 255 字节</td></tr><tr><td style="text-align:left;">TEXT</td><td style="text-align:left;">0 ~ 65535 字节</td></tr><tr><td style="text-align:left;">MEDIUMTEXT</td><td style="text-align:left;">0 ~ 16777215 字节</td></tr><tr><td style="text-align:left;">LONGTEXT</td><td style="text-align:left;">0 ~ 4294967295 字节</td></tr></tbody></table><p>在向 TEXT 类型的字段保存和查询数据时，系统自动按照实际长度存储，不需要预先定义长度。</p><p>允许的长度是指实际存储的字节数，而不是实际的字符个数，比如一个中文字符占两个字节， 那么 TEXT 类型可存储 65535/2 = 32767 个中文字符，而 varchar(100)可存储 100 个中文字符，实际占 200 个字节，但 varchar(65535) 并不能存储 65535 个中文字符，因为已超出范围（varchar 要预留 1 到 2 个字节存储这个字符的长度 65535×2 = 131072，最大只能到 65533）。</p><p>如果列声明的长度超过 255，则使用两个字节来存储长度，否则 1 个字节，当不允许非空字段的时候（因为要用一个字节来存储不可为空的标识），当允许非空字段的时候只能到 65532（省下了存储非空的那个字节）。</p><h2 id="二进制类型" tabindex="-1"><a class="header-anchor" href="#二进制类型"><span>二进制类型</span></a></h2><ol><li>二进制类型存储原始的二进制数据（如图片，视频，exe 文件等）。文本类型（TEXT）用来存储字符字符串（如由英文字符、中文字符或其它语言字符组成的字符串）。</li><li>二进制类型没有字符集，并且排序和比较基于列值字节的数值。而 TEXT 类型有字符集，并且根据字符集的校对规则对值进行排序和比较。</li></ol><p><strong>BINARY 与 VARBINARY</strong></p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">取值范围</th></tr></thead><tbody><tr><td style="text-align:left;">BINARY(M)</td><td style="text-align:left;">字节数为 M，允许长度为 0~M 的定长二进制字符串</td></tr><tr><td style="text-align:left;">VARBINARY(M)</td><td style="text-align:left;">允许长度为 0~M 的变长二进制字符串，字节数为值的长度加 1</td></tr></tbody></table><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，只是它们存储的是二进制字符串，M 参数指定该二进制数的最大字节长度为 M</p><ol><li>BINARY 类型的长度是固定的，在创建表时就指定了，不足最大长度时的空间后边由″\\0″补全。</li><li>VARBINARY 类型的长度是可变的，在创建表时指定了最大的长度，其长度可以在 0 到最大长度之间，在这个最大值范围内使用多少就分配多少。</li></ol><p>注意：当使用 where 检索时，因为 binary 会自动使用 ‘\\0&#39;填充字符，此时就需要加上 ‘\\0&#39;，对于 varbinary 则不会出现这种情况</p><p><strong>BIT</strong></p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">取值范围</th></tr></thead><tbody><tr><td style="text-align:left;">BIT(M)</td><td style="text-align:left;">M 位二进制数据，M 最大值为 64</td></tr></tbody></table><ol><li>插入数据时，使用 <strong>b&#39;位串&#39;</strong> 的方式插入相应值</li><li>查询时，可以使用 bin() 、oct() 、hex() 函数将字段的值转成相应的二进制、八进制和十六进制。</li></ol><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bit_example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">insert into</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bit_example </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;10100001&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">insert into</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bit_example </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BLOB</strong></p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">取值范围</th></tr></thead><tbody><tr><td style="text-align:left;">TINYBLOB</td><td style="text-align:left;">可变长二进制数据，最多 255 个字节</td></tr><tr><td style="text-align:left;">BLOB</td><td style="text-align:left;">可变长二进制数据，最多 (2^16 - 1) 个字节（即 65535 字节）</td></tr><tr><td style="text-align:left;">MEDIUMBLOB</td><td style="text-align:left;">可变长二进制数据，最多 (2^24 - 1) 个字节（即 16777215 字节）</td></tr><tr><td style="text-align:left;">LONGBLOB</td><td style="text-align:left;">可变长二进制数据，最多 (2^32 - 1) 个字节（即 4294967295 字节）</td></tr></tbody></table><p>BLOB 是一个二进制大对象 ，可以容纳可变数量的数据。注意的是，在实际工作中往往不会在 MySQL 中使用 BLOB 类型存储大对象数据，通常会将图片、音频和视频文件存储到服务器的磁盘上 ，并将图片、音频和视频的访问路径存储到 MySQL 中。</p><h2 id="枚举类型" tabindex="-1"><a class="header-anchor" href="#枚举类型"><span>枚举类型</span></a></h2><p>ENUM 类型又称为枚举类型。在创建表时，ENUM 类型的取值范围以列表的形式指定，其基本形式如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">属性名 ENUM(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;值 1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;值 2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ..., </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;值 n&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，“属性名”参数指字段的名称，“值 n”参数表示列表中的第 n 个值。ENUM 类型的值只能取列表中的一个元素，其取值列表中最多能有 65535（2 个字节）个值。如果数据值列表在 255 个以内，那么一个字节就够，如果超过 255 但是小于 65535，那么系统采用两个字节保存。</p><p>列表中的每个值独有一个顺序排列的编号，MySQL 中存入的是这个编号，而不是列表中的值，默认编号从 1 开始</p><p>如果 ENUM 类型加上了 NOT NULL 属性，其默认值为取值列表的第一个元素。如果不加 NOT NULL 属性，ENUM 类型将允许插入 NULL，而且 NULL 为默认值。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test_gender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\` (</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  \`id\`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  \`gender\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> enum(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;M&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;F&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;性别&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`id\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">InnoDB AUTO_INCREMENT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DEFAULT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">utf8mb4;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">insert INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test_gender (gender) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;M&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;f&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集合类型" tabindex="-1"><a class="header-anchor" href="#集合类型"><span>集合类型</span></a></h2><p>在创建表时，SET 类型的取值范围就以列表的形式指定了，其基本形式如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">属性名 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;值 1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;值 2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ..., </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;值 n&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，属性名参数指字段的名称，“值 n”参数表示列表中的第 n 个值，这些值末尾的空格将会被系统直接删除，其基本形式与 ENUM 类型一样。SET 类型的值可以取列表中的一个元素或者多个元素的组合，取多个元素时，不同元素之间用逗号隔开。SET 类型的值最多只能是由 64（8 个字节）个元素构成的组合（SET 会将选择的置 1，没有选择的置 0；最多 64 个元素正好可以用 8 个字节（64 位）存储所选择的）</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> myset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    col </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;b&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;c&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;d&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> myset (col) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a,d&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;d,a&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a,d,a&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a,d,d&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;d,a,d&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49)])])}const k=i(a,[["render",n]]),r=JSON.parse('{"path":"/Database/MySQL/MySQL%EF%BC%884-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89.html","title":"MySQL（4-数据类型）","lang":"zh-CN","frontmatter":{"title":"MySQL（4-数据类型）","tag":"MySQL","category":"数据库","date":"2025-05-04T22:38:34.000Z","description":"MySQL字段数据类型用于定义表中数据的格式，主要包括数值型（INT、FLOAT）、字符串型（CHAR、VARCHAR）、日期时间型（DATE、DATETIME）等。合理选择数据类型可优化存储空间和查询性能，确保数据完整性与准确性。不同类型有各自的存储范围和特性，需根据业务需求选择。","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL（4-数据类型）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-04T22:38:34.000Z\\",\\"dateModified\\":\\"2025-08-31T06:07:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"爱编程的小生\\",\\"url\\":\\"https://it-pxs.github.io/IT-Learn/\\"}]}"],["meta",{"property":"og:url","content":"https://it-pxs.github.io/IT-Learn/IT-Learn/Database/MySQL/MySQL%EF%BC%884-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"爱编程的小生"}],["meta",{"property":"og:title","content":"MySQL（4-数据类型）"}],["meta",{"property":"og:description","content":"MySQL字段数据类型用于定义表中数据的格式，主要包括数值型（INT、FLOAT）、字符串型（CHAR、VARCHAR）、日期时间型（DATE、DATETIME）等。合理选择数据类型可优化存储空间和查询性能，确保数据完整性与准确性。不同类型有各自的存储范围和特性，需根据业务需求选择。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-31T06:07:57.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2025-05-04T22:38:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-31T06:07:57.000Z"}]]},"git":{"createdTime":1756620477000,"updatedTime":1756620477000,"contributors":[{"name":"penggengxin","username":"penggengxin","email":"penggengxin@grgbanking.com","commits":1,"url":"https://github.com/penggengxin"}]},"readingTime":{"minutes":8.6,"words":2581},"filePathRelative":"Database/MySQL/MySQL（4-数据类型）.md"}');export{k as comp,r as data};
