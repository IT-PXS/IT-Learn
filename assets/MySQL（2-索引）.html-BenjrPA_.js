import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as l}from"./app-arQAAk6n.js";const n="/IT-Learn/assets/5-BNSyTFsN.png",t="/IT-Learn/assets/6-D-_Ye8DM.png",h={};function r(d,i){return l(),a("div",null,[...i[0]||(i[0]=[e(`<h2 id="前缀索引" tabindex="-1"><a class="header-anchor" href="#前缀索引"><span>前缀索引</span></a></h2><p>指使用字段的前部分字符建立索引，而不是在整个字段上建立索引</p><ol><li>优点：可以节省索引的空间，提高索引效率</li><li>缺点：降低索引的选择性（不重复数量/总数量），覆盖索引失效，order by 上不能使用前缀索引</li><li>使用场景：字段的前部分内容区分度高，后部分区分度低，如：邮箱地址-zhangsan@qq.com</li></ol><p><strong>前缀索引对覆盖索引的影响</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id,email </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> User </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> email</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;zhangsan@xx.com&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,email </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> User </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> email</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;zhangsan@xx.com&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 第一句SQL相比于第二条SQL，只返回了id和email。如果使用email整个字符串作为索引的话，可以利用覆盖索引，从index1查到结果直接返回，不需要回表。但是如果使用前缀索引的话，是需要回表进行判断的。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自适应哈希索引-ahi" tabindex="-1"><a class="header-anchor" href="#自适应哈希索引-ahi"><span>自适应哈希索引（AHI）</span></a></h2><p>自适应哈希索引是 Innodb 引擎的一个特殊功能，当它注意到某些索引值使用的非常频繁，发现建立哈希索引（又称散列索引）可以带来速度的提升，Innodb 就会在自己的内存缓冲区（Buffer Pool）里，开辟一块区域，建立自适应哈希索引（Adaptive Hash Index，AHI），以便加速查询。</p><p>InnoDB 会进行自调优，如果判定建立哈希索引能够提升查询效率，InnoDB 自己会在内存中建立相关哈希索引（所以这就是 Adaptive——“自适应”的由来），不需要人工手动干预，InnoDB 会根据所需自己创建自适应哈希索引。AHI 是通过缓冲池的 B+树页构造而来，因此建立的速度很快，而且不需要对整张表构建哈希索引。</p><p>AHI 有一个要求，即对这个页的连续访问模式必须是一样的，例如：对于(a, b)这样的联合索引页，其访问模式可以是：</p><ol><li>where a = xxx</li><li>where a = xxx and b = xxx</li></ol><p>访问模式一样指的是查询的条件一样，若交替进行上述两种查询，那么 InnoDB 存储引擎不会对该页造成 AHI</p><h2 id="底层数据结构" tabindex="-1"><a class="header-anchor" href="#底层数据结构"><span>底层数据结构</span></a></h2><p>MySQL 的数据是持久化的，意味着数据（索引+记录）是保存到磁盘上的，因为这样即使设备断电了，数据也不会丢失。</p><p>内存的访问速度是纳秒级别的，而磁盘访问的速度是毫秒级别的，也就是说读取同样大小的数据，磁盘中读取的速度比从内存中读取的速度要慢上万倍，甚至几十万倍。</p><p>磁盘读写的最小单位是扇区，扇区的大小只有 512B 大小，操作系统一次会读写多个扇区，所以操作系统的最小读写单位是块（Block）。Linux 中的块大小为 4KB，也就是一次磁盘 I/O 操作会直接读写 8 个扇区。</p><p>由于数据库的索引是保存到磁盘上的，因此当我们通过索引查找某行数据的时候，就需要先从磁盘读取索引到内存，再通过索引从磁盘中找到某行数据，然后读入到内存，也就是说查询过程中会发生多次磁盘 I/O，而磁盘 I/O 次数越多，所消耗的时间也就越大。所以，我们希望索引的数据结构能在尽可能少的磁盘的 I/O 操作中完成查询工作，因为磁盘 I/O 操作越少，所消耗的时间也就越小。</p><h3 id="树的高度" tabindex="-1"><a class="header-anchor" href="#树的高度"><span>树的高度</span></a></h3><p>索引的数据结构和具体存储引擎的实现有关，在 MySQL 中使用较多的索引有 Hash 索引、B+树索引等，经常使用的 InnoDB 存储引擎的默认索引实现为 B+树索引</p><p><strong>增加 B+树的路数可以降低树的高度，那么无限增加树的路数是不是可以有最优的查找效率？</strong></p><p>不可以，因为这样会形成一个有序数组，文件系统和数据库的索引都是存在硬盘上的，并且如果数据量大的话，不一定能一次性加载到内存中。有序数组没法一次性加载进内存，这时 B+树的多路存储威力就出来了，可以每次加载 B+树的一个结点，然后一步步往下找</p><h3 id="聚簇索引-innodb" tabindex="-1"><a class="header-anchor" href="#聚簇索引-innodb"><span>聚簇索引（InnoDB）</span></a></h3><p>聚集索引表记录的排序顺序和索引的排列顺序一致，所以查询速度快，对应的缺点就是修改慢，因为为了保证表中记录的物理和索引顺序一致，在记录插入的时候，会对数据页重新排序（因为在真实物理存储器的存储顺序只能有一种，而插入新数据必然会导致主键索引树的变化，主键索引树的顺序发生了改变，叶子节点中存储的行数据也要随之进行改变，就会发生大量的数据移动操作，所以效率会慢），因为在物理内存中的顺序只能有一种，所以聚集索引在一个表中只能有一个</p><p>聚簇索引是对磁盘上实际数据重新组织以按指定的一个或多个列的值排序的算法。他的数据行只存放在索引（B+树）的叶子中，内部节点不存放数据，找到了索引也就找到了数据</p><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>特点：</p><ol><li>存储数据的顺序和索引顺序一致，一般情况下主键会默认创建聚簇索引，且一张表只允许存在一个聚簇索引。</li><li>如果表中没有定义主键，InnoDB 会选择一个唯一的非空索引代替；</li><li>如果表中没有这样的索引，InnoDB 会隐式定义一个主键来作为聚簇索引</li></ol><p>注意：</p><ol><li>数据库的索引和数据都是存储在硬盘的，我们可以把读取一个节点当作一次磁盘 I/O 操作。那么上面的整个查询过程一共经历了 3 个节点，也就是进行了 3 次 I/O 操作。</li><li>B+Tree 存储千万级的数据只需要 3-4 层高度就可以满足，这意味着从千万级的表查询目标数据最多需要 3-4 次磁盘 I/O，所以 B+Tree 相比于 B 树和二叉树来说，最大的优势在于查询效率很高，因为即使在数据量很大的情况，查询一个数据的磁盘 I/O 依然维持在 3-4 次。</li></ol><h3 id="非聚簇索引-myisam" tabindex="-1"><a class="header-anchor" href="#非聚簇索引-myisam"><span>非聚簇索引（MyISAM）</span></a></h3><p>非聚簇索引指 B+树的叶子节点上的 data，并不是数据本身，而是主键值，主要用在 MyISAM 存储引擎中。访问数据总是需要二次查找，第一次找到主键值，第二次根据主键值找到行数据</p><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>会先检查二级索引中的 B+Tree 的索引值，找到对应的叶子节点，然后获取主键值，然后再通过主键索引中的 B+Tree 树查询到对应的叶子节点，然后获取整行数据。这个过程叫回表，也就是说要查两个 B+Tree 才能查到数据。</p><p>当查询的数据是能在二级索引的 B+Tree 的叶子节点里查询到，这时就不用再查主键索引查。这种在二级索引的 B+Tree 就能查询到结果的过程就叫作覆盖索引，也就是只需要查一个 B+Tree 就能找到数据</p><h3 id="聚簇-vs-非聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇-vs-非聚簇索引"><span>聚簇 VS 非聚簇索引</span></a></h3><ol><li>聚簇索引的叶子节点存储索引值和行数据；非聚簇索引的叶子节点存储索引值和主键值</li><li>聚簇索引一个表只能有一个；而非聚簇索引一个表可以存在多个</li><li>聚集索引存储记录是物理上连续存在；而非聚集索引是逻辑上的连续，物理存储并不连续</li><li>聚集索引的物理存储按照索引排序，是一种索引组织形式，索引的键值逻辑顺序决定了数据行的物理存储顺序；非聚集索引的物理存储不按照索引排序，是普通索引，仅仅是对数据列创建相应的索引，不影响整个表的物理存储顺序</li></ol><h2 id="文件排序-filesort" tabindex="-1"><a class="header-anchor" href="#文件排序-filesort"><span>文件排序（FileSort）</span></a></h2><p>当对 sql 进行 order by 排序的时候，需要尽可能地使用索引排序，如果无法使用索引排序，mysql 就会使用文件排序</p><ol><li>双路排序：先根据相应的条件取出相应的排序字段和可以直接定位行数的行 ID，然后在 sort buffer 中进行排序，排序完后再次取回其他需要的字段</li><li>单路排序：一次性取出满足条件行的所有字段，然后在 sort buffer 中进行排序</li></ol><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> order by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="双路排序过程" tabindex="-1"><a class="header-anchor" href="#双路排序过程"><span>双路排序过程</span></a></h3><ol><li>从索引 name 找到第一个满足 name = &quot;hello&quot; 的主键 id</li><li>根据主键 id 取出整行，把排序字段 age 和主键 id 这两个字段放在 sort buffer（排序缓存）中</li><li>从索引 name 取下一个满足 name = &quot;hello&quot; 的主键 id</li><li>重复 3、4，直到不满足 name = &quot;hello&quot;</li><li>对 sort buffer 中的字段 age 和主键 id 按照 age 进行排序</li><li>遍历排序好的 id 和字段 age，按照 id 的值回到原表中取出所有字段的值返回给客户端</li></ol><h3 id="单路排序过程" tabindex="-1"><a class="header-anchor" href="#单路排序过程"><span>单路排序过程</span></a></h3><ol><li>从索引 name 找到第一个满足 name = &quot;hello&quot; 条件的主键 id</li><li>根据主键 id 取出整行，取出所有字段的值，存入 sort buffer 中</li><li>从索引 name 找到下一个满足 name = &quot;hello&quot; 条件的主键 id</li><li>重复 2、3，直到不满足 name = &quot;hello&quot;</li><li>对 sort buffer 中的数据按照字段 age 进行排序</li><li>返回结果给客户端</li></ol><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><ol><li>单路排序会一次性取出满足条件行的所有字段，然后在 sort buffer 中进行排序；</li><li>双路排序（又叫回表排序模式）是首先取出相应的排序字段和可以直接定位行数据的行 ID，然后在 sort buffer 中进行排序，排序完后需要再次取回其它需要的字段；</li></ol><p><strong>using index 和 using filesort</strong></p><ol><li>using index 是用到了二级索引树，按照索引树的顺序去排序的；</li><li>using filesort 是没有用到二级索引树的，而是用到了主键索引，他是把整张表的数据加载到内存，去进行一个排序；</li></ol><p>因为 using filesort 是拿的主键索引（整张表的数据），而 using index 拿的是二级索引比主键索引相对小太多，所以 using index 效率会快很多。</p><h3 id="排序选择" tabindex="-1"><a class="header-anchor" href="#排序选择"><span>排序选择</span></a></h3><p>MySQL 通过比较系统变量 max_length_for_sort_data（默认 1024 字节）的大小和需要查询的字段总大小来判断使用哪种排序模式。</p><ol><li>如果字段的总长度小于 max_length_for_sort_data，那么使用单路排序模式；</li><li>如果字段的总长度大于 max_length_for_sort_data，那么使用双路排序模式。</li></ol><h3 id="内存不足怎么处理的" tabindex="-1"><a class="header-anchor" href="#内存不足怎么处理的"><span>内存不足怎么处理的？</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 使用临时文件的个数，这个值如果为0代表全部使用的sort_buffer内存排序，否则使用的磁盘文件排序</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;number_of_tmp_files&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果为 0，则使用排序缓存区；不为 0，则使用磁盘文件排序；</p><h3 id="出现的条件" tabindex="-1"><a class="header-anchor" href="#出现的条件"><span>出现的条件</span></a></h3><ol><li>order by 字段不是索引字段</li><li>order by 字段是索引字段，但是 select 中没有使用覆盖索引，如：select * from user order by age asc;</li><li>order by 中同时存在 ASC 和 DESC 排序，如：select a, b from user order by a asc, b desc</li><li>order by 多个字段排序时，不是按照索引顺序进行 order by，即不是按照最左前缀法则</li><li>order by 语句中索引列使用了表达式，包括函数表达式</li></ol><h2 id="索引重构" tabindex="-1"><a class="header-anchor" href="#索引重构"><span>索引重构</span></a></h2><h3 id="什么时候需要重建索引呢" tabindex="-1"><a class="header-anchor" href="#什么时候需要重建索引呢"><span>什么时候需要重建索引呢？</span></a></h3><ol><li>表上频繁发生 update，delete 操作</li><li>表上发生了 alter table...move 操作（move 操作导致了 rowid 变化）</li></ol><h3 id="怎么判断索引是否应该重建" tabindex="-1"><a class="header-anchor" href="#怎么判断索引是否应该重建"><span>怎么判断索引是否应该重建？</span></a></h3><ol><li>一般看索引是否倾斜的严重，是否浪费了空间，对索引进行结构分析：</li></ol><p>analyze index index_name validate structure;</p><ol start="2"><li>在相同的 session 中查询 index_stats 表：</li></ol><p>select height, DEL_LF_ROWS/LF_ROWS from index_stats;</p><p>当查询的 height &gt;= 4（索引的深度，即从根到叶节点的高度）或 DEL_IF_ROWS/LF_ROWS &gt; 0.2 的情况下，就应该考虑重建该索引</p><h3 id="如何重建索引" tabindex="-1"><a class="header-anchor" href="#如何重建索引"><span>如何重建索引？</span></a></h3><ol><li>drop 原索引，然后再创建索引（这种方式相当耗时，一般不建议使用）</li></ol><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">drop</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> index_name;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> index</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> index_name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name (index_column);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>直接重建索引（方法较快，建议使用）</li></ol><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">alter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> indexname </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rebuild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">alter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> index</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> indexname </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rebuild</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> online</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>rebuild 是快速重建索引的一种有效的办法，因为它是一种使用现有索引项来重建索引项的方法，如果重建索引时有其他用户在对这个表操作，尽量使用带 online 参数来最大限度的减少索引重建时将会出现的任何加锁问题。由于新旧索引在建立时同时存在，因此，使用这种重建方法需要有额外的磁盘空间可供临时使用，当索引建完后把老索引删除，如果没有成功，也不影响原来的索引，利用这种办法可以用来将一个索引移到新的表空间</p><h3 id="重建索引的过程" tabindex="-1"><a class="header-anchor" href="#重建索引的过程"><span>重建索引的过程</span></a></h3><ol><li>Rebuild 以 index fast full scan 或 table full scan（采用哪种方式取决于 cost）读取原索引中的数据来构建一个新的索引，重建过程中有排序操作，rebuild online 执行表扫描获取数据，重建过程中有排序的操作</li><li>Rebuild 会阻塞 DML 操作，rebuild online 不会阻塞 DML 操作</li><li>rebuild online 时系统会产生一个 SYS_JOURNAL_xxx 的 IOT 类型的系统临时日志表，所有 rebuild online 时索引的变化都记录在这个表中，当新的索引创建完成后，把这个表的记录维护到新的索引中去，然后 drop 掉旧的索引，rebuild online 就完成了</li></ol><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ol><li>执行 rebuild 操作时，需要检查表空间是否足够</li><li>虽然说 rebuild online 操作允许 DML 操作，但还是建议在业务不繁忙时段进行</li><li>Rebuild 操作会产生大量 Redo Log</li></ol><h2 id="索引长度限制" tabindex="-1"><a class="header-anchor" href="#索引长度限制"><span>索引长度限制</span></a></h2><ol><li>对于 MyISAM 表，组合索引的长度跟各个列总和长度有关</li></ol><ul><li>字符编码为 utf8，组合索引长度和不能超过 333，超过则创建失败。单列索引不能超过 333，如果字符超过 333，则最终创建的是前缀索引（即取前 333 个字节）</li><li>字符编码为 latin1，组合索引长度和不能超过 1000，超过则创建失败。单列索引不能超过 1000，超过则最终创建的是前缀索引（即取前 1000 个字节）</li></ul><ol start="2"><li>对于 InnoDB 表，组合索引的长度跟各列的长度和无关，跟单列的长度有关，且能创建成功</li></ol><ul><li>字符编码为 utf8，组合索引长度最大为列数*255，单列索引长度最大为 255</li><li>字符编码为 latin1，组合索引长度最大为列数*767，单列索引长度最大为 767</li></ul><p>注意：索引的长度跟数据引擎有关，还和字符编码有关</p>`,81)])])}const k=s(h,[["render",r]]),g=JSON.parse('{"path":"/More/MySQL/MySQL%EF%BC%882-%E7%B4%A2%E5%BC%95%EF%BC%89.html","title":"MySQL（2-索引）","lang":"zh-CN","frontmatter":{"title":"MySQL（2-索引）","tag":"MySQL","category":"心得","date":"2025-05-15T22:38:34.000Z","description":"前缀索引 指使用字段的前部分字符建立索引，而不是在整个字段上建立索引 优点：可以节省索引的空间，提高索引效率 缺点：降低索引的选择性（不重复数量/总数量），覆盖索引失效，order by 上不能使用前缀索引 使用场景：字段的前部分内容区分度高，后部分区分度低，如：邮箱地址-zhangsan@qq.com 前缀索引对覆盖索引的影响 自适应哈希索引（AHI...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL（2-索引）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-15T22:38:34.000Z\\",\\"dateModified\\":\\"2025-09-25T13:39:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"爱编程的小生\\",\\"url\\":\\"https://it-pxs.github.io/IT-Learn/\\"}]}"],["meta",{"property":"og:url","content":"https://it-pxs.github.io/IT-Learn/IT-Learn/More/MySQL/MySQL%EF%BC%882-%E7%B4%A2%E5%BC%95%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"爱编程的小生"}],["meta",{"property":"og:title","content":"MySQL（2-索引）"}],["meta",{"property":"og:description","content":"前缀索引 指使用字段的前部分字符建立索引，而不是在整个字段上建立索引 优点：可以节省索引的空间，提高索引效率 缺点：降低索引的选择性（不重复数量/总数量），覆盖索引失效，order by 上不能使用前缀索引 使用场景：字段的前部分内容区分度高，后部分区分度低，如：邮箱地址-zhangsan@qq.com 前缀索引对覆盖索引的影响 自适应哈希索引（AHI..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-25T13:39:55.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2025-05-15T22:38:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-25T13:39:55.000Z"}]]},"git":{"createdTime":1758807595000,"updatedTime":1758807595000,"contributors":[{"name":"penggengxin","username":"penggengxin","email":"penggengxin@grgbanking.com","commits":1,"url":"https://github.com/penggengxin"}]},"readingTime":{"minutes":13.13,"words":3940},"filePathRelative":"More/MySQL/MySQL（2-索引）.md","autoDesc":true}');export{k as comp,g as data};
